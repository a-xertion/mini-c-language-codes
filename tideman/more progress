#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
} pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    for(int i = 0; i < candidate_count; i++)
    {
        if(strcmp(name, candidates[i]) == 0)
        { // ranks[num of caniddates] = {2 , 1, 0} aligns with candidates[] = {Alice, Bob, Charlie}
            ranks[rank] = i; //the candidate's preference of voting is recorded for only one part of one ballot
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    for(int i = 0; i < candidate_count; i++)
    {
        if(ranks[i] != candidate_count) // so if this candidate beat at least one person and is not last...
        {
            for(int j = 0; j < candidate_count; j++) // iterating through the people a candidate beat to update score
            {
                if(ranks[i] < ranks[j]) // less number closer to 0 is closer to winning!
                {
                    preferences[i][j] += 1; // updating score! bigger score = more votes winning
                }
            }
        }
    }
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    int column_index = 1; // moves the starting place of the column right each time, making sure that there are no repeats
    for(int i = 0; i < candidate_count; i++)
    {
        for(int j = column_index; j < candidate_count; j++)
        {
            if(preferences[i][j] > preferences[j][i])
            {
                pairs[i].winner = preferences[i][j]; // the index of pairs = candidate num.
                pairs[i].loser = preferences[j][i]; // winner and loser put into pair pairs[]
                pair_count++; // adding pair count because it's a valid pair
            }
            else if(preferences[i][j] < preferences[j][i])
            {
                pairs[j].winner = preferences[j][i];
                pairs[j].loser = preferences[i][j];
                pair_count++;
            }
        }
        column_index++;
    }
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{
    int length = sizeof(pairs) / sizeof(pairs[0]); // finding the length of pairs through sizeof(finds num of bytes)
    pair min = pairs[0]
    for(int i = 0; i < length; i++) // selection sort
    {
        min = pairs[i];
        for(int j = i + 1; j < length; j++)
        {
            if((min.winner - min.loser) > (pairs[j].winner))
        }
    }
}
