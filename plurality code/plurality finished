#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// Candidates have name and vote count
typedef struct
{
    string name;
    int votes;
} candidate;

// Array of candidates
candidate candidates[MAX]; //global

// Number of candidates
int candidate_count; //global

// Function prototypes
bool vote(string name);
void print_winner(void);

int main(int argc, string argv[])
{ //argc is number of command line inputs
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: plurality [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1; // to delete the command line ./plurality
    if (candidate_count > MAX) // makes sure max is not exceeded
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1]; //sets all of the names and votes to the candidates
        candidates[i].votes = 0;
    }

    int voter_count = get_int("Number of voters: "); // asks for number of votes

    // Loop over all voters
    for (int i = 0; i < voter_count; i++)
    {
        string name = get_string("Vote: ");

        // Check for invalid vote
        if (!vote(name))
        {
            printf("Invalid vote.\n");
        }
    }

    // Display winner of election
    print_winner();
}

// Update vote totals given a new vote
bool vote(string name) //checks if the string name is a candidate to be voted upon, if true, then add votes. Return false otherwise.
{
    for(int i = 0; i < candidate_count; i++)
    {
        if(strcmp(name, candidates[i].name) == 0)
        {
            candidates[i].votes++;
            return true;
        }
    }
    return false;
}

// Print the winner (or winners) of the election
void print_winner(void) //
{
    int min = 0;
    for(int i = 0; i < candidate_count; i++) // must find the candidate with greatest votes
    {
        min = i;
        for(int j = i + 1; j < candidate_count; j++) // trying to do selection sort (swap swap)
        {
            if(candidates[min].votes > candidates[j].votes)
            {
                min = j; //finding the min to swap
            }
        } // sorting the candidates array into smallest to biggest
        candidate temp = candidates[i];
        candidates[i] = candidates[min];
        candidates[min] = temp;
    }

    /*for(int i = 0; i < candidate_count; i++) //seeing organized list
    {
        printf("    %s", candidates[i].name);
    } */

    //now checking if anyone is tied for first
    int index = candidate_count - 1;
    for(int i = candidate_count - 1; i > 0; i--)
    {
        if(candidates[i].votes == candidates[i - 1].votes)
        {
            index = i - 1; // the index now is the place where the repeating number of votes starts
        }
    }
    //printf("\nindex: %i", index);

    //printing out
    for(int i = index; i < candidate_count; i++)
    {
        //printf("%i ", i);
        printf("%s\n", candidates[i].name);
    }
}
